Esse banco de dados guarda arquivos com diversas características diferentes

Modelo de dados agregados - deseja-se trabalhar com os dados na forma dados em unidade
Um agregado é um conjunto de objetos relacionados - ajuda muito para trabalhar em cluster
se uma das máquinas cair, as outras continuam o processamento

O mongoDB armazena os dados no modelo BSON (Binary JSON)

RELACIONAL         | DOCUMENTO
-------------------+--------------------
Instância do banco | Instância do banco
Esquema            | Banco de dados
Tabela             | Coleção
Linha              | Documento
Coluna             | campo
Id linha           | _id (id do Documento)

Baseado na replicação master-slave

servidor: mongod.exe
cliente: mongo.exe

//mostrar bases criadas
$ show dbs 

//criar bases
$ use aula

//criar collection
$ db.albuns.insert({})

$ show collections
$ db.albuns.find({})

//mongo db cria um id, mas não é a mesma coisa que uma chave primária

$ db.albuns.insert({"nome":"The dark side of the moon", "data":new Data(1973, 3, 29)})
$ db.albuns.find().pretty()

//os dados nos BD de documentos não são estruturados - é a maior característica deste tipo de BD

$ db.albuns.find({"nome":"Nevermind"})
$ db.albuns.findone({"nome":"Nevermind"})
$ db.albuns.remove({"nome":"Among the Living"})
$ db.albuns.update({"nome":"Nevermind"}, {$set: {"duracao": 3013}})
//update serve para modificar um atributo existente ou inserir um novo atributo

$ db.albuns.find({"duracao": {"$lt": 5000}}).pretty()

$ db.albuns.find({$or: [{"data": {"$lt": new Date(1990,0,1)} }, {"dataLancamento": {"$lt": new Date(1990,0,1)} }] }).pretty()

CRIANDO RELACIONAMENTO ENTRE OS DOCUMENTOS
$ db.artistas.insert([ {"nome":"Metallica"},
{"nome":"Megadeth"}, {"nome":"Slayer"},
{"nome":"Anthrax"},{"nome":"Iron Maiden"},
{"nome":"Nirvana"},{"nome":"Pink Floyd"}
] )
//foram inseridos 7 documentos diferentes

$ db.albuns.update( {"nome":"Master of Puppets"}, {$set : {"artistaId":ObjectId("5b706e9ef65abea342ccd9db")} } )

Apesar de mapearmos os relacionamentos no Mongo, as restrições de integridade referencial não se aplicam
A aplicação deve cuidar deste controle

var artista = db.artistas.findOne({"nome":"Metallica"})
var albuns = db.albuns.find({"artistaId":artista._id})

Ás vezes é melhor fazer um documento aninhado para não consultar em duas coleções diferentes
isso é feito para melhorar a performance da aplicação

$ db.albuns.insert( { "nome" : "Imaginations from the other side", "dataLancamento" : new Date(1995,3,4), "duracao": 2958, "artista": {"nome":"Blind Guardian"}})
$ db.albuns.insert( { "nome" : "Somewhere Far Beyond", "dataLancamento" : new Date(1992,5,30), "duracao": 3328, "artista": {"nome":"Blind Guardian"}})

db.albuns.find({"artista": {"nome":"Blind Guardian"} }).pretty()

Mongo DB é muito bom para registrar eventos, comentários de usuários, sistema de gerenciamento de conteúdo WEB,
comércio eletrônico, 

NÃO USAR! Transações complexas, atomicidade entre transações, 